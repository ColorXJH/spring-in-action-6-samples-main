<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
        https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.3</version>
        <relativePath/>
    </parent>
    <groupId>sia</groupId>
    <artifactId>taco-cloud</artifactId>
    <version>0.0.2-SNAPSHOT</version>
    <name>taco-cloud</name>
    <description>Taco Cloud Example</description>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>
        <!-- tag::thymeleafStarter[] -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- end::thymeleafStarter[] -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>htmlunit-driver</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- tag::lombokDependency[] -->
        <!--
          通常情况下，Lombok 库并不需要显式地指定 scope。
          这是因为它是一个编译时依赖，只在编译期间使用，并不会打包到最终可执行文件（如 JAR 或 WAR 文件）中。
          因此，即使你没有指定 scope，它默认的 scope 也会是 compile。
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!-- end::lombokDependency[] -->

        <!-- tag::validationStarter[] -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- end::validationStarter[] -->
    </dependencies>

    <!-- tag::excludeLombok[] -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--如果想要手动添加Lombok到构建之中，还需要在pom.xml文件的<build>部分将其从Spring Boot Maven插件中排除-->
                    <!--排除 Spring Boot Maven 插件中已经包含的 Lombok 依赖，以避免冲突或者版本不一致的问题-->
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <!-- end::excludeLombok[] -->
    <!--
    通常情况下，Spring Boot Maven 插件会将一些常用的依赖包含在内，以简化项目的配置和构建过程。
    然而，如果你的项目已经显式地声明了某个依赖（比如 Lombok），而插件又尝试引入相同版本的相同依赖，就会导致重复引入的情况。
    为了避免重复引入依赖，并且确保项目使用的是你明确指定的版本，你可以通过配置排除插件默认引入的依赖，如上面所示的方式排除 Lombok。
    这样一来，就能够确保项目使用的是项目自身声明的 Lombok 版本，而不会因为插件的干预而导致依赖冲突或版本不一致的问题。
    Lombok的魔力是在编译期发挥作用的，所以在运行期没有必要用到它们。像这样将其排除出去，在最终形成的JAR或WAR文件中就不会包含它了。
    -->

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </pluginRepository>
    </pluginRepositories>

</project>
